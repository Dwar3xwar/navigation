// Type definitions for NavigationReactMobile 1.0
// Project: http://grahammendick.github.io/navigation/
// Definitions by: Graham Mendick <https://github.com/grahammendick>
// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped

import { StateNavigator, State, HTML5HistoryManager } from 'navigation';
import { Component, ReactElement } from 'react';

declare module 'navigation' {
    export interface State {
        renderScene: (state: State, data: any) => ReactElement<any>;
    }
}

export interface SharedElementProps {
    name: string;
    data?: any;
    unshare?: boolean;
    stateNavigator?: StateNavigator;
    children: ReactElement<any>;
}

export interface SharedElement {
    name: string;
    oldElement: {ref: HTMLElement; data: any};
    mountedElement: {ref: HTMLElement; data: any};
}

export interface SharedElementNavigationMotionProps {
    sharedElements: SharedElement[];
    progress: number;
    duration: number;
}

export interface SharedElementMotionProps {
    onAnimated?: (name: string, ref: HTMLElement, data: any) => void;
    onAnimating?: (name: string, ref: HTMLElement, data: any) => void;
    elementStyle?: (name: string, ref: HTMLElement, data: any) => any;
    children: (style: any, name: string, oldElementData: any, mountedElementData: any) => ReactElement<any>;
}

export interface NavigationMotionProps {
    unmountedStyle?: any;
    mountedStyle?: any;
    crumbStyle?: any;
    duration?: number;
    sharedElementMotion?: (props: SharedElementNavigationMotionProps) => ReactElement<SharedElementMotion>;
    stateNavigator?: StateNavigator;
    children: (style: any, scene: ReactElement<any>, key: number, active: boolean, state: State, data: any) => ReactElement<any>;
}

export class SharedElement extends Component<SharedElementProps> { }

export class SharedElementMotion extends Component<SharedElementNavigationMotionProps & SharedElementMotion> { }

export class NavigationMotion extends Component<NavigationMotionProps> { }

export class MobileHistoryManager extends HTML5HistoryManager {
    constructor(buildCurrentUrl: (url: string) => string, applicationPath?: string);
    getHref(url: string): string;
    getUrl(hrefElement: HTMLAnchorElement | Location): string;
    getCurrentUrl(): string;
}
